# Task Definition: repo-demo
TASK_NAME="repo-demo"
TASK_DESCRIPTION="Demo: Code quality analysis with best practices assessment"
TASK_TYPE="repo"

# Model and Provider Configuration
TASK_PROVIDER="gemini"
TASK_MODEL="free"

# Template 
TASK_TEMPLATE="repo-demo-code-analysis"

# Template Variables (will be injected in the Template)
TASK_FOCUS="{{FOCUS=code quality and best practices}}"
TASK_PRINCIPLES="{{PRINCIPLES=SOLID, DRY, KISS}}"
TASK_LANGUAGE="{{LANGUAGE=JavaScript}}"
TASK_FRAMEWORKS="file:{{FRAMEWORKS_FILE=package.json}}"
TASK_STANDARDS="file:{{STANDARDS_FILE=.eslintrc}}"
TASK_ARCHITECTURE="{{ARCHITECTURE=MVC}}"

# Context Curation (Default values for include/exclude)
PARAM_INCLUDE="src/,lib/,components/"
PARAM_EXCLUDE=""

# Parameters (will be appended to the command)
PARAM_MAX_TOKENS="8000"

# Output Configuration
TASK_OUTPUT_PREFIX="repo-demo-code-quality-report"

# Usage: ./run-prompt.sh repo-demo [--include="src/core/,src/utils/"] [--exclude="src/experimental/"] [--focus="security vulnerabilities"] [--principles="OWASP Top 10"] [--language="TypeScript"] [--frameworks-file="frontend/package.json"] [--standards-file=".eslintrc.json"] [--architecture="Microservices"] [--go]
#
# This template demonstrates:
# 1. How to create an advanced repo task with a custom template
# 2. How to define default patterns for including/excluding files
# 3. How to inject file content for frameworks and standards
# 4. How to customize the analysis focus and principles
